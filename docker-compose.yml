version: '3.8'
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payzap-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: payzap
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - payzap-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d payzap" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: payzap-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - payzap-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Express Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payzap-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/payzap
      REDIS_URL: redis://redis:6379
      JWT_SECRET: gkuxy@295mdlq
      CORS_ORIGIN: https://devpro.live,https://api.devpro.live
    expose:
      - "5000" # Only expose internally, not to host
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - payzap-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: payzap-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot_webroot:/var/www/certbot:ro
      - certbot_certs:/etc/letsencrypt:ro
    depends_on:
      - backend
    networks:
      - payzap-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: payzap-certbot
    volumes:
      - certbot_webroot:/var/www/certbot
      - certbot_certs:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d api.devpro.live
    depends_on:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certbot_webroot:
    driver: local
  certbot_certs:
    driver: local

networks:
  payzap-network:
    driver: bridge
